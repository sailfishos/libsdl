diff --git a/src/video/wayland/SDL_waylandclipboard.c b/src/video/wayland/SDL_waylandclipboard.c
deleted file mode 100644
index 5fd826b9bf..0000000000
--- a/src/video/wayland/SDL_waylandclipboard.c
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
-  Simple DirectMedia Layer
-  Copyright (C) 1997-2018 Sam Lantinga <slouken@libsdl.org>
-
-  This software is provided 'as-is', without any express or implied
-  warranty.  In no event will the authors be held liable for any damages
-  arising from the use of this software.
-
-  Permission is granted to anyone to use this software for any purpose,
-  including commercial applications, and to alter it and redistribute it
-  freely, subject to the following restrictions:
-
-  1. The origin of this software must not be misrepresented; you must not
-     claim that you wrote the original software. If you use this software
-     in a product, an acknowledgment in the product documentation would be
-     appreciated but is not required.
-  2. Altered source versions must be plainly marked as such, and must not be
-     misrepresented as being the original software.
-  3. This notice may not be removed or altered from any source distribution.
-*/
-#include "../../SDL_internal.h"
-
-#if SDL_VIDEO_DRIVER_WAYLAND
-
-#include "SDL_waylanddatamanager.h"
-#include "SDL_waylandevents_c.h"
-
-int
-Wayland_SetClipboardText(_THIS, const char *text)
-{
-    SDL_VideoData *video_data = NULL;
-    SDL_WaylandDataDevice *data_device = NULL;
-    
-    int status = 0;
- 
-    if (_this == NULL || _this->driverdata == NULL) {
-        status = SDL_SetError("Video driver uninitialized");
-    } else {
-        video_data = _this->driverdata;
-        /* TODO: Support more than one seat */ 
-        data_device = Wayland_get_data_device(video_data->input);
-        if (text[0] != '\0') {
-            SDL_WaylandDataSource* source = Wayland_data_source_create(_this);
-            Wayland_data_source_add_data(source, TEXT_MIME, text,
-                                         strlen(text) + 1); 
-
-            status = Wayland_data_device_set_selection(data_device, source);
-            if (status != 0) {
-                Wayland_data_source_destroy(source);
-            }
-        } else {
-            status = Wayland_data_device_clear_selection(data_device);
-        }
-    }
-
-    return status;
-}
-
-char *
-Wayland_GetClipboardText(_THIS)
-{
-    SDL_VideoData *video_data = NULL;
-    SDL_WaylandDataDevice *data_device = NULL;
-
-    char *text = NULL;
-
-    void *buffer = NULL;
-    size_t length = 0;
- 
-    if (_this == NULL || _this->driverdata == NULL) {
-        SDL_SetError("Video driver uninitialized");
-    } else {
-        video_data = _this->driverdata;
-        /* TODO: Support more than one seat */ 
-        data_device = Wayland_get_data_device(video_data->input);
-        if (data_device->selection_offer != NULL) {
-            buffer = Wayland_data_offer_receive(data_device->selection_offer,
-                                                &length, TEXT_MIME, SDL_TRUE);
-            if (length > 0) {
-                text = (char*) buffer;
-            } 
-        } else if (data_device->selection_source != NULL) {
-            buffer = Wayland_data_source_get_data(data_device->selection_source,
-                                                  &length, TEXT_MIME, SDL_TRUE);
-            if (length > 0) {
-                text = (char*) buffer;
-            } 
-        }
-    }
-
-    if (text == NULL) {
-        text = SDL_strdup("");
-    }
-
-    return text;
-}
-
-SDL_bool
-Wayland_HasClipboardText(_THIS)
-{
-    SDL_VideoData *video_data = NULL;
-    SDL_WaylandDataDevice *data_device = NULL;
-
-    SDL_bool result = SDL_FALSE;    
-    if (_this == NULL || _this->driverdata == NULL) {
-        SDL_SetError("Video driver uninitialized");
-    } else {
-        video_data = _this->driverdata;
-        data_device = Wayland_get_data_device(video_data->input);
-        if (data_device != NULL && Wayland_data_offer_has_mime(
-                data_device->selection_offer, TEXT_MIME)) {
-            result = SDL_TRUE;
-        } else if(data_device != NULL && Wayland_data_source_has_mime(
-                data_device->selection_source, TEXT_MIME)) {
-            result = SDL_TRUE;
-        }
-    }
-    return result;
-}
-
-#endif /* SDL_VIDEO_DRIVER_WAYLAND */
-
-/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/wayland/SDL_waylandclipboard.h b/src/video/wayland/SDL_waylandclipboard.h
deleted file mode 100644
index 467e1c77f7..0000000000
--- a/src/video/wayland/SDL_waylandclipboard.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
-  Simple DirectMedia Layer
-  Copyright (C) 1997-2018 Sam Lantinga <slouken@libsdl.org>
-
-  This software is provided 'as-is', without any express or implied
-  warranty.  In no event will the authors be held liable for any damages
-  arising from the use of this software.
-
-  Permission is granted to anyone to use this software for any purpose,
-  including commercial applications, and to alter it and redistribute it
-  freely, subject to the following restrictions:
-
-  1. The origin of this software must not be misrepresented; you must not
-     claim that you wrote the original software. If you use this software
-     in a product, an acknowledgment in the product documentation would be
-     appreciated but is not required.
-  2. Altered source versions must be plainly marked as such, and must not be
-     misrepresented as being the original software.
-  3. This notice may not be removed or altered from any source distribution.
-*/
-#include "../../SDL_internal.h"
-
-#ifndef SDL_waylandclipboard_h_
-#define SDL_waylandclipboard_h_
-
-extern int Wayland_SetClipboardText(_THIS, const char *text);
-extern char *Wayland_GetClipboardText(_THIS);
-extern SDL_bool Wayland_HasClipboardText(_THIS);
-
-#endif /* SDL_waylandclipboard_h_ */
-
-/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/wayland/SDL_waylanddyn.h b/src/video/wayland/SDL_waylanddyn.h
index 720427ea77..9fdd34263d 100644
--- a/src/video/wayland/SDL_waylanddyn.h
+++ b/src/video/wayland/SDL_waylanddyn.h
@@ -91,10 +91,6 @@ void SDL_WAYLAND_UnloadSymbols(void);
 #define wl_output_interface (*WAYLAND_wl_output_interface)
 #define wl_shell_interface (*WAYLAND_wl_shell_interface)
 #define wl_shm_interface (*WAYLAND_wl_shm_interface)
-#define wl_data_device_interface (*WAYLAND_wl_data_device_interface)
-#define wl_data_offer_interface (*WAYLAND_wl_data_offer_interface)
-#define wl_data_source_interface (*WAYLAND_wl_data_source_interface)
-#define wl_data_device_manager_interface (*WAYLAND_wl_data_device_manager_interface)
 
 #endif /* SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC */
 
diff --git a/src/video/wayland/SDL_waylandevents.c b/src/video/wayland/SDL_waylandevents.c
index 0c953a54c2..a75fa617a4 100644
--- a/src/video/wayland/SDL_waylandevents.c
+++ b/src/video/wayland/SDL_waylandevents.c
@@ -56,7 +56,6 @@ struct SDL_WaylandInput {
     struct wl_pointer *pointer;
     struct wl_touch *touch;
     struct wl_keyboard *keyboard;
-    SDL_WaylandDataDevice *data_device;
     struct zwp_relative_pointer_v1 *relative_pointer;
     SDL_WindowData *pointer_focus;
     SDL_WindowData *keyboard_focus;
@@ -330,8 +329,6 @@ pointer_handle_button_common(struct SDL_WaylandInput *input, uint32_t serial,
             default:
                 return;
         }
-            
-        Wayland_data_device_set_serial(input->data_device, serial); 
 
         SDL_SendMouseButton(window->sdlwindow, 0,
                             state ? SDL_PRESSED : SDL_RELEASED, sdl_button);
@@ -566,9 +563,6 @@ keyboard_handle_key(void *data, struct wl_keyboard *keyboard,
 
         if (size > 0) {
             text[size] = 0;
-
-            Wayland_data_device_set_serial(input->data_device, serial);
-
             SDL_SendKeyboardText(text);
         }
     }
@@ -641,245 +635,10 @@ static const struct wl_seat_listener seat_listener = {
     NULL, /* name */
 };
 
-static void
-data_source_handle_target(void *data, struct wl_data_source *wl_data_source,
-                          const char *mime_type)
-{
-}
-
-static void
-data_source_handle_send(void *data, struct wl_data_source *wl_data_source,
-                        const char *mime_type, int32_t fd)
-{
-    Wayland_data_source_send((SDL_WaylandDataSource *)data, mime_type, fd);
-}
-                       
-static void
-data_source_handle_cancelled(void *data, struct wl_data_source *wl_data_source)
-{
-    Wayland_data_source_destroy(data);
-}
-                       
-static void
-data_source_handle_dnd_drop_performed(void *data, struct wl_data_source *wl_data_source)
-{
-}
-
-static void
-data_source_handle_dnd_finished(void *data, struct wl_data_source *wl_data_source)
-{
-}
-
-static void
-data_source_handle_action(void *data, struct wl_data_source *wl_data_source,
-                          uint32_t dnd_action)
-{
-}
-
-static const struct wl_data_source_listener data_source_listener = {
-    data_source_handle_target,
-    data_source_handle_send,
-    data_source_handle_cancelled,
-    data_source_handle_dnd_drop_performed, // Version 3
-    data_source_handle_dnd_finished,       // Version 3
-    data_source_handle_action,             // Version 3
-};
-
-SDL_WaylandDataSource*
-Wayland_data_source_create(_THIS)
-{
-    SDL_WaylandDataSource *data_source = NULL;
-    SDL_VideoData *driver_data = NULL;
-    struct wl_data_source *id = NULL;
-
-    if (_this == NULL || _this->driverdata == NULL) {
-        SDL_SetError("Video driver uninitialized");
-    } else {
-        driver_data = _this->driverdata;
-
-        if (driver_data->data_device_manager != NULL) {
-            id = wl_data_device_manager_create_data_source(
-                     driver_data->data_device_manager);
-        }
-
-        if (id == NULL) { 
-            SDL_SetError("Wayland unable to create data source");
-        } else {
-            data_source = SDL_calloc(1, sizeof *data_source);
-            if (data_source == NULL) {
-                SDL_OutOfMemory();
-                wl_data_source_destroy(id);
-            } else {
-                WAYLAND_wl_list_init(&(data_source->mimes));
-                data_source->source = id;
-                wl_data_source_set_user_data(id, data_source);
-                wl_data_source_add_listener(id, &data_source_listener,
-                                            data_source);
-            }
-        }
-    }
-    return data_source;
-}
-
-static void
-data_offer_handle_offer(void *data, struct wl_data_offer *wl_data_offer,
-                        const char *mime_type)
-{
-    SDL_WaylandDataOffer *offer = data;
-    Wayland_data_offer_add_mime(offer, mime_type);
-}
-
-static void
-data_offer_handle_source_actions(void *data, struct wl_data_offer *wl_data_offer,
-                                 uint32_t source_actions)
-{
-}
-
-static void
-data_offer_handle_actions(void *data, struct wl_data_offer *wl_data_offer,
-                          uint32_t dnd_action)
-{
-}
-
-static const struct wl_data_offer_listener data_offer_listener = {
-    data_offer_handle_offer,
-    data_offer_handle_source_actions, // Version 3
-    data_offer_handle_actions,        // Version 3
-};
-
-static void
-data_device_handle_data_offer(void *data, struct wl_data_device *wl_data_device,
-                              struct wl_data_offer *id)
-{
-    SDL_WaylandDataOffer *data_offer = NULL;
-
-    data_offer = SDL_calloc(1, sizeof *data_offer);
-    if (data_offer == NULL) {
-        SDL_OutOfMemory();
-    } else {
-        data_offer->offer = id;
-        data_offer->data_device = data;
-        WAYLAND_wl_list_init(&(data_offer->mimes));
-        wl_data_offer_set_user_data(id, data_offer);
-        wl_data_offer_add_listener(id, &data_offer_listener, data_offer);
-    }
-}
-
-static void
-data_device_handle_enter(void *data, struct wl_data_device *wl_data_device,
-                         uint32_t serial, struct wl_surface *surface,
-                         wl_fixed_t x, wl_fixed_t y, struct wl_data_offer *id)
-{
-    SDL_WaylandDataDevice *data_device = data;
-    SDL_bool has_mime = SDL_FALSE;
-    uint32_t dnd_action = WL_DATA_DEVICE_MANAGER_DND_ACTION_NONE; 
-        
-    data_device->drag_serial = serial;
-
-    if (id != NULL) {
-        data_device->drag_offer = wl_data_offer_get_user_data(id);
-
-        /* TODO: SDL Support more mime types */
-        has_mime = Wayland_data_offer_has_mime(
-            data_device->drag_offer, FILE_MIME);
-
-        /* If drag_mime is NULL this will decline the offer */
-        wl_data_offer_accept(id, serial,
-                             (has_mime == SDL_TRUE) ? FILE_MIME : NULL);
-
-        /* SDL only supports "copy" style drag and drop */
-        if (has_mime == SDL_TRUE) {
-            dnd_action = WL_DATA_DEVICE_MANAGER_DND_ACTION_COPY;
-        }
-        wl_data_offer_set_actions(data_device->drag_offer->offer,
-                                  dnd_action, dnd_action);
-    }
-}
-
-static void
-data_device_handle_leave(void *data, struct wl_data_device *wl_data_device)
-{
-    SDL_WaylandDataDevice *data_device = data;
-    SDL_WaylandDataOffer *offer = NULL;
-
-    if (data_device->selection_offer != NULL) {
-        data_device->selection_offer = NULL;
-        Wayland_data_offer_destroy(offer);
-    }
-}
-
-static void
-data_device_handle_motion(void *data, struct wl_data_device *wl_data_device,
-                          uint32_t time, wl_fixed_t x, wl_fixed_t y)
-{
-}
-
-static void
-data_device_handle_drop(void *data, struct wl_data_device *wl_data_device)
-{
-    SDL_WaylandDataDevice *data_device = data;
-    void *buffer = NULL;
-    size_t length = 0;
-
-    const char *current_uri = NULL;
-    const char *last_char = NULL;
-    char *current_char = NULL;
-    
-    if (data_device->drag_offer != NULL) {
-        /* TODO: SDL Support more mime types */
-        buffer = Wayland_data_offer_receive(data_device->drag_offer,
-                                            &length, FILE_MIME, SDL_FALSE);
-
-        /* uri-list */
-        current_uri = (const char *)buffer;
-        last_char = (const char *)buffer + length;
-        for (current_char = buffer; current_char < last_char; ++current_char) {
-            if (*current_char == '\n' || *current_char == 0) {
-                if (*current_uri != 0 && *current_uri != '#') {
-                    *current_char = 0;
-                    SDL_SendDropFile(NULL, current_uri);
-                }
-                current_uri = (const char *)current_char + 1;
-            }
-        }
-
-        SDL_free(buffer);
-    }
-}
-
-static void
-data_device_handle_selection(void *data, struct wl_data_device *wl_data_device,
-                             struct wl_data_offer *id)
-{    
-    SDL_WaylandDataDevice *data_device = data;
-    SDL_WaylandDataOffer *offer = NULL;
-
-    if (id != NULL) {
-        offer = wl_data_offer_get_user_data(id);
-    }
-
-    if (data_device->selection_offer != offer) {
-        Wayland_data_offer_destroy(data_device->selection_offer);
-        data_device->selection_offer = offer;
-    }
-
-    SDL_SendClipboardUpdate();
-}
-
-static const struct wl_data_device_listener data_device_listener = {
-    data_device_handle_data_offer,
-    data_device_handle_enter,
-    data_device_handle_leave,
-    data_device_handle_motion,
-    data_device_handle_drop,
-    data_device_handle_selection
-};
-
 void
 Wayland_display_add_input(SDL_VideoData *d, uint32_t id)
 {
     struct SDL_WaylandInput *input;
-    SDL_WaylandDataDevice *data_device = NULL;
 
     input = SDL_calloc(1, sizeof *input);
     if (input == NULL)
@@ -890,27 +649,6 @@ Wayland_display_add_input(SDL_VideoData *d, uint32_t id)
     input->sx_w = wl_fixed_from_int(0);
     input->sy_w = wl_fixed_from_int(0);
     d->input = input;
-    
-    if (d->data_device_manager != NULL) {
-        data_device = SDL_calloc(1, sizeof *data_device);
-        if (data_device == NULL) {
-            return;
-        }
-
-        data_device->data_device = wl_data_device_manager_get_data_device(
-            d->data_device_manager, input->seat
-        );
-        data_device->video_data = d;
-
-        if (data_device->data_device == NULL) {
-            SDL_free(data_device);
-        } else {
-            wl_data_device_set_user_data(data_device->data_device, data_device);
-            wl_data_device_add_listener(data_device->data_device,
-                                        &data_device_listener, data_device);
-            input->data_device = data_device;
-        }
-    }
 
     wl_seat_add_listener(input->seat, &seat_listener, input);
     wl_seat_set_user_data(input->seat, input);
@@ -925,20 +663,6 @@ void Wayland_display_destroy_input(SDL_VideoData *d)
     if (!input)
         return;
 
-    if (input->data_device != NULL) {
-        Wayland_data_device_clear_selection(input->data_device);
-        if (input->data_device->selection_offer != NULL) {
-            Wayland_data_offer_destroy(input->data_device->selection_offer);
-        }
-        if (input->data_device->drag_offer != NULL) {
-            Wayland_data_offer_destroy(input->data_device->drag_offer);
-        }
-        if (input->data_device->data_device != NULL) {
-            wl_data_device_release(input->data_device->data_device);
-        }
-        SDL_free(input->data_device);
-    }
-
     if (input->keyboard)
         wl_keyboard_destroy(input->keyboard);
 
@@ -963,15 +687,6 @@ void Wayland_display_destroy_input(SDL_VideoData *d)
     d->input = NULL;
 }
 
-SDL_WaylandDataDevice* Wayland_get_data_device(struct SDL_WaylandInput *input)
-{
-    if (input == NULL) {
-        return NULL;
-    }
-
-    return input->data_device;
-}
-
 /* !!! FIXME: just merge these into display_handle_global(). */
 void Wayland_display_add_relative_pointer_manager(SDL_VideoData *d, uint32_t id)
 {
diff --git a/src/video/wayland/SDL_waylandevents_c.h b/src/video/wayland/SDL_waylandevents_c.h
index 1c5ffe5171..eaddd34ed4 100644
--- a/src/video/wayland/SDL_waylandevents_c.h
+++ b/src/video/wayland/SDL_waylandevents_c.h
@@ -26,17 +26,12 @@
 
 #include "SDL_waylandvideo.h"
 #include "SDL_waylandwindow.h"
-#include "SDL_waylanddatamanager.h"
-
-struct SDL_WaylandInput;
 
 extern void Wayland_PumpEvents(_THIS);
 
 extern void Wayland_display_add_input(SDL_VideoData *d, uint32_t id);
 extern void Wayland_display_destroy_input(SDL_VideoData *d);
 
-extern SDL_WaylandDataDevice* Wayland_get_data_device(struct SDL_WaylandInput *input);
-
 extern void Wayland_display_add_pointer_constraints(SDL_VideoData *d, uint32_t id);
 extern void Wayland_display_destroy_pointer_constraints(SDL_VideoData *d);
 
diff --git a/src/video/wayland/SDL_waylandsym.h b/src/video/wayland/SDL_waylandsym.h
index 77783df81d..dd06948309 100644
--- a/src/video/wayland/SDL_waylandsym.h
+++ b/src/video/wayland/SDL_waylandsym.h
@@ -83,10 +83,6 @@ SDL_WAYLAND_INTERFACE(wl_compositor_interface)
 SDL_WAYLAND_INTERFACE(wl_output_interface)
 SDL_WAYLAND_INTERFACE(wl_shell_interface)
 SDL_WAYLAND_INTERFACE(wl_shm_interface)
-SDL_WAYLAND_INTERFACE(wl_data_device_interface)
-SDL_WAYLAND_INTERFACE(wl_data_source_interface)
-SDL_WAYLAND_INTERFACE(wl_data_offer_interface)
-SDL_WAYLAND_INTERFACE(wl_data_device_manager_interface)
 
 SDL_WAYLAND_MODULE(WAYLAND_EGL)
 SDL_WAYLAND_SYM(struct wl_egl_window *, wl_egl_window_create, (struct wl_surface *, int, int))
diff --git a/src/video/wayland/SDL_waylandvideo.c b/src/video/wayland/SDL_waylandvideo.c
index b6155e76d9..326bdf3717 100644
--- a/src/video/wayland/SDL_waylandvideo.c
+++ b/src/video/wayland/SDL_waylandvideo.c
@@ -34,7 +34,6 @@
 #include "SDL_waylandopengles.h"
 #include "SDL_waylandmouse.h"
 #include "SDL_waylandtouch.h"
-#include "SDL_waylandclipboard.h"
 #include "SDL_waylandvulkan.h"
 
 #include <sys/types.h>
@@ -187,10 +186,6 @@ Wayland_CreateDevice(int devindex)
     device->DestroyWindow = Wayland_DestroyWindow;
     device->SetWindowHitTest = Wayland_SetWindowHitTest;
 
-    device->SetClipboardText = Wayland_SetClipboardText;
-    device->GetClipboardText = Wayland_GetClipboardText;
-    device->HasClipboardText = Wayland_HasClipboardText;
-
 #if SDL_VIDEO_VULKAN
     device->Vulkan_LoadLibrary = Wayland_Vulkan_LoadLibrary;
     device->Vulkan_UnloadLibrary = Wayland_Vulkan_UnloadLibrary;
@@ -366,9 +361,6 @@ display_handle_global(void *data, struct wl_registry *registry, uint32_t id,
         Wayland_display_add_relative_pointer_manager(d, id);
     } else if (strcmp(interface, "zwp_pointer_constraints_v1") == 0) {
         Wayland_display_add_pointer_constraints(d, id);
-    } else if (strcmp(interface, "wl_data_device_manager") == 0) {
-        d->data_device_manager = wl_registry_bind(d->registry, id, &wl_data_device_manager_interface, 3);
-
 #ifdef SDL_VIDEO_DRIVER_WAYLAND_QT_TOUCH
     } else if (strcmp(interface, "qt_touch_extension") == 0) {
         Wayland_touch_create(d, id);
diff --git a/src/video/wayland/SDL_waylandvideo.h b/src/video/wayland/SDL_waylandvideo.h
index c16c0bdd49..23f5a11f20 100644
--- a/src/video/wayland/SDL_waylandvideo.h
+++ b/src/video/wayland/SDL_waylandvideo.h
@@ -60,7 +60,6 @@ typedef struct {
     } shell;
     struct zwp_relative_pointer_manager_v1 *relative_pointer_manager;
     struct zwp_pointer_constraints_v1 *pointer_constraints;
-    struct wl_data_device_manager *data_device_manager;
 
     EGLDisplay edpy;
     EGLContext context;
