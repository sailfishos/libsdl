From 509228c42300f0ee362404d28f50999fa6eaed5e Mon Sep 17 00:00:00 2001
From: Ethan Lee <flibitijibibo@gmail.com>
Date: Sun, 18 Apr 2021 22:26:27 -0400
Subject: [PATCH] wayland: Implement GetDisplayDPI

In SDL-2.0.14 , function getDisplayDPI return SDL_Unsuported() when we use wayland, as backend.
This patch add implementation of this function. Display physical_width and physical_height can be
catched in display_handle_geometry callback and stored in (SDL_WaylandOutputData*)display->driverdata,
dpi calculate in display_handle_mode callback, where we has display width and height in pixels.

diff --git a/src/video/wayland/SDL_waylandvideo.c b/src/video/wayland/SDL_waylandvideo.c
index 2f50d5735..c758546a7 100644
--- a/src/video/wayland/SDL_waylandvideo.c
+++ b/src/video/wayland/SDL_waylandvideo.c
@@ -60,6 +60,8 @@ static void
 Wayland_GetDisplayModes(_THIS, SDL_VideoDisplay *sdl_display);
 static int
 Wayland_SetDisplayMode(_THIS, SDL_VideoDisplay *display, SDL_DisplayMode *mode);
+static int
+Wayland_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdpi, float * vdpi);
 
 static void
 Wayland_VideoQuit(_THIS);
@@ -175,6 +177,7 @@ Wayland_CreateDevice(int devindex)
     /* Set the function pointers */
     device->VideoInit = Wayland_VideoInit;
     device->VideoQuit = Wayland_VideoQuit;
+    device->GetDisplayDPI = Wayland_GetDisplayDPI;
     device->SetDisplayMode = Wayland_SetDisplayMode;
     device->GetDisplayModes = Wayland_GetDisplayModes;
     device->GetWindowWMInfo = Wayland_GetWindowWMInfo;
@@ -239,10 +242,14 @@ display_handle_geometry(void *data,
 
 {
     SDL_VideoDisplay *display = data;
+    SDL_WaylandOutputData* driverdata = ((SDL_WaylandOutputData*)display->driverdata);
 
     SDL_DisplayOrientation orientation = SDL_ORIENTATION_UNKNOWN;
     SDL_bool is_portrait = physical_height > physical_width;
 
+    driverdata->physical_width = physical_width;
+    driverdata->physical_height = physical_height;
+
     if (SDL_strcmp(model, "") != 0 && SDL_strcmp(display->name, model) != 0) {
         SDL_free(display->name);
         display->name = SDL_strdup(model);
@@ -278,19 +285,31 @@ display_handle_mode(void *data,
 {
     SDL_DisplayMode mode;
     SDL_VideoDisplay *display = data;
+    SDL_WaylandOutputData* driverdata = ((SDL_WaylandOutputData*)display->driverdata);
 
     SDL_zero(mode);
     mode.format = SDL_PIXELFORMAT_RGB888;
     mode.w = width;
     mode.h = height;
     mode.refresh_rate = refresh / 1000; // mHz to Hz
-    mode.driverdata = ((SDL_WaylandOutputData*)display->driverdata)->output;
+    mode.driverdata = driverdata->output;
     SDL_AddDisplayMode(display, &mode);
 
     if (flags & WL_OUTPUT_MODE_CURRENT) {
         display->current_mode = mode;
         display->desktop_mode = mode;
     }
+
+    driverdata->hdpi = driverdata->physical_width ?
+        (((float) width) * 25.4f / driverdata->physical_width) :
+        0.0f;
+    driverdata->vdpi = driverdata->physical_height ?
+        (((float) height) * 25.4f / driverdata->physical_height) :
+        0.0f;
+    driverdata->ddpi = SDL_ComputeDiagonalDPI(  width,
+                                                height,
+                                                ((float) driverdata->physical_width) / 25.4f,
+                                                ((float) driverdata->physical_height) / 25.4f);
 }
 
 static void
@@ -496,6 +515,24 @@ Wayland_SetDisplayMode(_THIS, SDL_VideoDisplay *display, SDL_DisplayMode *mode)
     return SDL_Unsupported();
 }
 
+static int
+Wayland_GetDisplayDPI(_THIS, SDL_VideoDisplay * sdl_display, float * ddpi, float * hdpi, float * vdpi)
+{
+    SDL_WaylandOutputData *driverdata = (SDL_WaylandOutputData *)sdl_display->driverdata;
+
+    if (ddpi) {
+        *ddpi = driverdata->ddpi;
+    }
+    if (hdpi) {
+        *hdpi = driverdata->hdpi;
+    }
+    if (vdpi) {
+        *vdpi = driverdata->vdpi;
+    }
+
+    return driverdata->ddpi != 0.0f ? 0 : SDL_SetError("Couldn't get DPI");
+}
+
 void
 Wayland_VideoQuit(_THIS)
 {
diff --git a/src/video/wayland/SDL_waylandvideo.h b/src/video/wayland/SDL_waylandvideo.h
index 2c481d85e..2f7f53621 100644
--- a/src/video/wayland/SDL_waylandvideo.h
+++ b/src/video/wayland/SDL_waylandvideo.h
@@ -86,6 +86,9 @@ typedef struct {
 typedef struct {
     struct wl_output *output;
     float scale_factor;
+
+    int physical_width, physical_height;
+    float ddpi, vdpi, hdpi;
 } SDL_WaylandOutputData;
 
 #endif /* SDL_waylandvideo_h_ */
